--------------------------------------data types 

list -- append() ,insert() ,remove() ,return value .... pop() , .sort , len() , in
dict -- dict[""]="" , pop , in
set -- add ,remove , in
tuples -- len , in

----------------------------------------range 
always have 3 attribues

--------------------------------------------------sorting in list

pairs = [(1, 9), (3, 4), (2, 5)]

pairs.sort(key=lambda x:x[1]%x[0])                   key will always take function
print(pairs)

[(1, 9), (2, 5), (3, 4)]


--------------------------------------------------- multiple return 

def stats(a, b):
    return a + b, a * b

s, m = stats(3, 4)
print(s, m)


-------------------------------------  file handling
opening -- with open () as f
reading -- f. read() or 
            for line in f : 
               print(line.strip())

writeing -- with open() as f:
                f.write()  or f.writelines(list)

Use with for safe, auto-closing files â€” you already did, perfect

Always add \n if you want new lines during writes

Use .strip() when reading to clean unwanted extra spaces or line breaks

You can mix read+write with "r+" if needed

---------------------------------------------------------------- exception 

finally should be used in try catch .. if u opening file .. clsoe it there .. like that kind of stuff

stack multiple exception on each another for single try block


raise will throw exception but we neeed to catch it somehow =-=====
def vote(age):
    if age < 18:
        raise ValueError("Not eligible to vote")
    else:
        print("Eligible to vote")

try:
    vote(16)
except ValueError as e:
    print(e)

--------------------------------------------custom exception 

class UnderAgeError(Exception):
    def __init__(self, age):
        super().__init__(f"Age {age} is too young to marry!")

def marry(age):
    if age < 21:
        raise UnderAgeError(age)                  .... just raising no printing is doone here
    else: 
        print("Marriage allowed")

try:
    marry(18)
except UnderAgeError as e:
    print(e)




----------------------------------------------------------------oop
super should be used to access parents methods .. without super then there should be unique names for methods of child and parent

if u are using parents mehtod 2 ways
super().has()
newvehicle.has(self)                ... use self in parameter


-----------------------------------------------------list comprehension 
list = [what to put  ... for i in list .. condition]


-----------------------------------------------------initializing set and dict

dict={}
set = set()


----------------------------------------------------- multithreading and multiprocessing
thread1= threading.Thread(target=call1,args=(msg1,))
                            function      arguments

                            
multiprocessing is like invisible link .. whatever inside it .. will vanish as process end ... even the global variable



----------------------------------------------------------------argument parsing
import argparse

create object of it -- 
parser = argparse.ArgumentParser(description="Demo of argparse")

add args 
parser.add_argument('--name', type=str, help='Your name')

args =parser.parse_args()

print(args.name)